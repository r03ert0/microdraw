<!DOCTYPE html>
<html>

<head>
    {{> partials/header }}
    <link rel="stylesheet" type="text/css" href="/css/ui.css" />
    <link rel="stylesheet" href='https://fonts.googleapis.com/css?family=Roboto:100' type='text/css' />
    <link rel="stylesheet" type="text/css" href="/css/projectSettings-style.css" />
    <link rel="stylesheet" type="text/css" href="/css/access-style.css" />
    <style>
        input, textarea {
            background: none;
            border: none;
            width: 100%;
        }
    </style>
</head>

<body>

<div id="app" style="width:100%;height:100%;display:flex;flex-direction:column">
    
    <!-- Header (fixed height) -->
    <div style="flex:0 0 64px">
        <!-- Top-right menu bar -->
        <div id="menu">
            <img id="addProject" class="button" title="add project" src='/img/plus.svg'/>
            <img id="doc" class="button" title="documentation" src='/img/doc.svg'/>
            <a href="https://github.com/neuroanatomy/microdraw/issues/new" target="_blank"><img id="bug" class="button" title="report a bug" src='/img/bug.svg'/></a>
            <a href="https://github.com/neuroanatomy" target="_blank"><img id="github" class="button" title="join our github project" style='width:15px;height:15px' src='/img/github.svg'/></a>
            <div id="MyLogin">
                <span>{{{login}}}</span>
            </div>
        </div>

        <!-- Small left-top logo -->
        <div style="display:inline-block;margin:10px">
            <a href='/' style="text-decoration:none">
                <img style='height:56px;vertical-align:middle' src='/img/microdraw-white.svg'/>
            </a>
            <input v-model="projectInfo.name" style="width:auto;text-align:left;font-family:Roboto,sans-serif;font-size:36px;font-weight:100;vertical-align:middle" class="noEmptyWithPlaceholder" placeholder="Enter a project name">
        </div>
    </div>
    
    <!-- Content (variable height) -->
    <div id="content" style="flex:1 0 auto;justify-content:center;position:relative">
    
        <!-- to center -->
        <div id="centeringDiv">

                <div id="projImage">
                    <a href='/project/{{projectShortname}}'><svg id="jdenticon" width="100%" height="100%"></svg></a>
                </div>

                <div id="projDescription">
                    <a href='/project/{{projectShortname}}'><h1>{{projectShortname}}</h1></a>
                    <input v-model="projectInfo.url" style="text-align:center" class="noEmptyWithPlaceholder" placeholder="Enter a project website">
                    <p>by <a href='/user/{{owner}}'>{{owner}}</a></p>
                    <textarea v-model="projectInfo.description" style="text-align:center" class="noEmptyWithPlaceholder" placeholder="Enter a project description"></textarea>
                    <p><span id="numCollaborators">[[projectInfo.collaborators.list.length]]</span> Collaborators</p>
                    <p><span id="numAnnotations">[[projectInfo.annotations.list.length]]</span> Annotations</p>
                    <p><span id="numFiles">[[projectInfo.files.list.length]]</span> Data Files</p>

                    <!-- Save or Cancel -->
                    <div style="display:block;margin:0 auto;width:200px">
                        <h2 id="saveChanges" class="pushButton">Save Changes</h2>
                        <h2 id="deleteProject" class="pushButton">Delete Project</h2>
                        <h2 id="goToProject" class="pushButton">Go to Project</h2>
                        <p id="saveFeedback"></p>
                    </div>
                </div>
                
                <div id="projTable">

                            <!-- Tab Content 1: Access -->
                            <h2 class="selection-header">Access</h2>
                            <table id="access" class="tabContent" style="padding:10px;display:table">
                                <thead>
                                    <tr>
                                        <th>Nickname</th>
                                        <th>Name</th>
                                        <th>Collaborators</th>
                                        <th>Annotations</th>
                                        <th>Data Files</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    <tr v-for="val in projectInfo.collaborators.list">
                                        <td>
                                            <autocomplete-input v-model="val.userID" @change="updateName(val, event)" class="noEmptyWithPlaceholder" placeholder="Enter user ID"></autocomplete-input>
                                            <!--<input v-model="val.userID" class="noEmptyWithPlaceholder" placeholder="User ID">-->
                                        </td>
                                        <td>
                                            <input v-model="val.name" class="noEmptyWithPlaceholder" placeholder="User Name">
                                        </td>
                                        <td>
                                            <div class='access' :data-level='["none","view","edit","add","remove"].indexOf(val.access.collaborators)'>
                                                <span class='view' title='view collaborators'></span>
                                                <span class='edit' title='edit collaborators'></span>
                                                <span class='add' title='add collaborators'></span>
                                                <span class='remove' title='remove collaborators'></span>
                                            </div>
                                        </td>
                                        <td>
                                            <div class='access' :data-level='["none","view","edit","add","remove"].indexOf(val.access.annotations)'>
                                                <span class='view' title='view collaborators'></span>
                                                <span class='edit' title='edit collaborators'></span>
                                                <span class='add' title='add collaborators'></span>
                                                <span class='remove' title='remove collaborators'></span>
                                            </div>
                                        </td>
                                        <td>
                                            <div class='access' :data-level='["none","view","edit","add","remove"].indexOf(val.access.files)'>
                                                <span class='view' title='view collaborators'></span>
                                                <span class='edit' title='edit collaborators'></span>
                                                <span class='add' title='add collaborators'></span>
                                                <span class='remove' title='remove collaborators'></span>
                                            </div>
                                        </td>
                                    </tr>
                                </tbody>
                            </table>
                            <div style="text-align:right">
                                <img id="addCollaborator" class="button" style="width:20px; height:20px; margin:8 2 0 0" src='/img/plus-square.svg' title='add collaborator'/>
                                <img id="removeCollaborator" class="button" style="width:20px; height:20px; margin:8 2 0 0" src='/img/minus-square.svg' title='remove collaborator'/>
                            </div>
                            
                            
                            <!-- Tab Content 2: Annotations -->
                            <h2 class="selection-header">Annotations</h2>
                            <table id="annotations" class="tabContent" style="padding:10px">
                                <thead>
                                    <tr>
                                        <th>Name</th>
                                        <th>Type</th>
                                        <th>Value</th>
                                        <th>Display</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    <tr v-for="val in projectInfo.annotations.list">
                                        <td>
                                            <input v-model="val.name" contentEditable=true class='noEmptyWithPlaceholder' placeholder="Enter annotation name">
                                        </td>
                                        <td>
                                            <select class='mui-select' :selectedIndex="annotationType.indexOf(val.type)">
                                                <option v-for="opt in annotationType">[[opt]]</option>
                                            </select>
                                        </td>
                                        <td contentEditable=true class='noEmpty'>
                                            <select class='mui-select' :selectedIndex="labelSets.indexOf(val.values)">
                                                <option v-for="opt in labelSets">[[opt]]</option>
                                            </select>
                                        </td>
                                        <td>
                                            <div class='display' :data-check='val.display'></div>
                                        </td>
                                    </tr>
                                </tbody>
                            </table>
                            <div style="text-align:right">
                                <img id="addAnnotation" class="button" style="width:20px; height:20px; margin:8 2 0 0" src='/img/plus-square.svg' title='add annotation'/>
                                <img id="removeAnnotation" class="button" style="width:20px; height:20px; margin:8 2 0 0" src='/img/minus-square.svg' title='remove annotation'/>
                            </div>

                            <!-- Tab Content 3: Data -->
                            <h2 class="selection-header">Data Files</h2>
                            <table id="files" class="tabContent" style="padding:10px">
                                <thead>
                                    <tr>
                                        <th>URL</th>
                                        <th>Name</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    <tr v-for="val in projectInfo.files.list">
                                        <td><input v-model="val.source" contentEditable=true class='noEmptyWithPlaceholder' placeholder="Enter data file URL"></td>
                                        <td><input v-model="val.name" contentEditable=true class='noEmptyWithPlaceholder' placeholder="Enter data file name"></td>
                                    </tr>
                                </tbody>
                            </table>
                            <div style="text-align:right">
                                <img id="importFiles" class="button" style="width:20px; height:20px; margin:8 2 0 0" src='/img/upload-square.svg' title='upload csv'/>
                                <img id="exportFiles" class="button" style="width:20px; height:20px; margin:8 2 0 0" src='/img/download-square.svg' title='download csv'/>
                                <img id="addFile" class="button" style="width:20px; height:20px; margin:8 2 0 0" src='/img/plus-square.svg' title='add new url entry'/>
                                <img id="removeFile" class="button" style="width:20px; height:20px; margin:8 2 0 0" src='/img/minus-square.svg' title='remove url entry'/>
                            </div>
                </div>
        </div>
        <!-- end of centering div -->

    </div>
    <!-- End Content -->
    
    <!-- Space (fixed height) -->
    <div style="flex:0 0 50px">
    </div>

    <!-- Footer (fixed height) -->
    <div style="flex:0 0 100px;background-color:#000">
        <p style="width:100%;font-size:small;text-align:center"> 
            <a target="_blank" href="https://neuroanatomy.github.io">
                <img src="/img/naat-bw.svg" style="width:28px;height:28px;margin-right:4px;display:inline-block;vertical-align:middle"/></a>
            <a target="_blank" href="https://neuroanatomy.github.io" class="linkNoULine">
                groupe de neuroanatomie appliquée et théorique
            </a>
        </p>
    </div>
    
    <!-- Import files -->
    <!-- black overlay -->
    <div id='importFilesDialog' style='display:none;position:fixed;top:0;left:0;width:100%;height:100%;background-color:rgba(0,0,0,0.7);z-index:100'>
        <!-- centered content -->
        <div style='position:relative;padding:1rem;margin:2rem auto;background-color:#333;max-width:600px;text-align:center;border:1px solid #777;height:calc(100% - 4rem);box-sizing:border-box'>
            <!-- overflow: scroll -->
            <div style='display:inline-block;max-width:600px;padding:2rem;overflow:scroll;max-height:calc(100% - 10rem)'>
                <table>
                    <thead>
                        <tr>
                            <th>URL</th>
                            <th>Name</th>
                        </tr>
                    <tbody>
                    </tbody>
                </table>
            </div>
            <!-- Import/Cancel buttons -->
            <div style="display:block;margin:0 auto;max-width:200px">
                <h2 id="importFilesDialogOk" class="pushButton">Import</h2>
                <h2 id="importFilesDialogCancel" class="pushButton">Cancel</h2>
            </div>
        </div>
    </div>
    
</div>

<script>
var projectInfo={{{projectInfo}}};
var projectShortname = "{{{projectShortname}}}";
</script>

<script src="https://cdn.jsdelivr.net/npm/jdenticon@2.2.0"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/blueimp-md5/2.11.1/js/md5.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/vue"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/awesomplete/1.1.5/awesomplete.min.js"></script>
<link rel="stylesheet" type="text/css" href="https://cdnjs.cloudflare.com/ajax/libs/awesomplete/1.1.5/awesomplete.css" />

<!--
<script src="http://localhost/libs/jdenticon/2.2.0/jdenticon@2.2.0"></script>
<script src="http://localhost/libs/blueimp-md5/2.11.1/md5.min.js"></script>
<script src="http://localhost/libs/vue/2.4.2/vue.min.js"></script>
<script src="http://localhost/libs/awesomplete/1.1.5/awesomplete.min.js"></script>
<link href="http://localhost/libs/awesomplete/1.1.5/awesomplete.css" rel="stylesheet" type="text/css" />
-->

<style>
    .awesomplete > ul {
        background: #222
    }
    .awesomplete > ul:before {
        background: none;
        border: none;
    }
    .awesomplete mark,
    .awesomplete li[aria-selected="true"] mark {
        background: #555;
    }
</style>

<script>
Vue.component('autocomplete-input', {
  data () { return { list: [] } },
  props: ['value'],
  mounted () {
    let self = this;
    this.$nextTick(() => {
        const input = self.$refs.awesomplete;
        const aw = new Awesomplete(input, { minChars: 3, list: this.list });
        input.addEventListener('input', (e) => {
            if(input.value.length>=3) {
                const xhr = new XMLHttpRequest();
                xhr.onload = function () {
                    const res = JSON.parse(xhr.responseText);
                    if(xhr.status >= 200 && xhr.status < 300 && typeof res !== 'undefined') {
                        aw.list = res.map((v)=>v.username);
                        aw.evaluate();
                    }
                };
                xhr.open('GET', `/search/json/users?q=${input.value}`);
                xhr.send();
            }
        });
        input.addEventListener('awesomplete-select', (e) => {
            const self = this;
            this.$emit('input', e.text.value);
            const xhr = new XMLHttpRequest();
            xhr.onload = function () {
                const res = JSON.parse(xhr.responseText);
                self.$emit('change', e);
            };
            xhr.open('GET', `/user/json/${e.text.value}`);
            xhr.send();
        })
    })
  },
  template: `<input ref="awesomplete" v-bind:value="value" v-on:input="$emit('input',$event.target.value)"/>`
});
</script>

<script>
var app = new Vue({
  el: '#app',
  delimiters: ['[[', ']]'],
  data: {
    projectInfo: projectInfo,
    annotationType: ['vectorial', 'text'],
    labelSets: ['Set I', 'Set II', 'Set III']
  },
  methods: {
      updateName: function (ob, e) {
          const res = JSON.parse(e.target.response);
          ob.name = res.name;
          this.$forceUpdate();
      }
  }
});

// Add icon based on project's name
jdenticon.update(document.getElementById("jdenticon"),md5(projectShortname));

var cursorFiles = 0;

// Each project requires at least 1 vectorial-type annotation
// Add a default one if there is none.
let vecAnnFound = false;
for(ann of app.projectInfo.annotations.list) {
    if(ann.type === "vectorial") {
        vecAnnFound = true;
        break;
    }
}
if(vecAnnFound === false) {
    addAnnotation();
}

/*
queryFiles();
*/

function queryFiles() {
    $.get("/project/json/"+app.projectInfo.shortname+"/files", {start:cursorFiles,length:100,name:true})
    .then(function(list) {
        if(list.length) {
            appendFiles(list);
            cursorFiles += 100;
            queryFiles();
        }
    });
}

function appendFiles(list) {
    app.projectInfo.files.list.push.apply(app.projectInfo.files.list, list);
}

// click event handler
document.addEventListener('click', function (e) {
    /* access widget */
    if(e.target.matches('.view')) {
        e.preventDefault();
        onAccessClicked(e,0);
    } else if(e.target.matches('.edit')) {
        e.preventDefault();
        onAccessClicked(e,1);
    } else if(e.target.matches('.add')) {
        e.preventDefault();
        onAccessClicked(e,2);
    } else if(e.target.matches('.remove')) {
        e.preventDefault();
        onAccessClicked(e,3);
    } else
    
    /* collaborators */
    if(e.target.matches("#addCollaborator")) {
        e.preventDefault();
        addCollaborator(); // accParam
    } else if(e.target.matches("#removeCollaborator")) {
        e.preventDefault();
        removeCollaborator(); //accParam
    } else

    /* annotations */
    if(e.target.matches("#addAnnotation")) {
        e.preventDefault();
        addAnnotation(); // annParam
    } else if(e.target.matches("#removeAnnotation")) {
        e.preventDefault();
        removeAnnotation(); //annParam
    } else if(e.target.matches(".display")) { // for the display option
        e.preventDefault();
        onCheckClicked(e);
    } else

    /* files */
    if(e.target.matches("#addFile")) {
        e.preventDefault();
        addFile(); // filesParam
    } else if(e.target.matches("#removeFile")) {
        e.preventDefault();
        removeFile(); //filesParam
    } else if(e.target.matches("#importFiles")) {
        e.preventDefault();
        importFiles();
    } else if(e.target.matches("#exportFiles")) {
        e.preventDefault();
        exportFiles();
    } else

    /* import files dialog */
    if(e.target.matches("#importFilesDialogOk")) {
        e.preventDefault();
        importFilesDialog();
    } else if(e.target.matches("#importFilesDialogCancel")) {
        e.preventDefault();
        document.querySelector("#importFilesDialog").style.display = 'none';
    } else if(e.target.matches("#exportFiles")) {
        e.preventDefault();
        exportFiles();
    } else
    
    /* add project menu button */
    if(e.target.matches("#addProject")) {
        location="/project/new";
    }
});

document.querySelector("#access").addEventListener('click', function (e) {
    selectRow(e.target.closest('tr'));
    disableDeleteOnAnyoneUser(e);
});
document.querySelector("#annotations").addEventListener('click', function (e) {
    selectRow(e.target.closest('tr'));
});
document.querySelector("#files").addEventListener('click', function (e) {
    selectRow(e.target.closest('tr'));
});

document.querySelector("#saveChanges").addEventListener('click', saveChanges);
document.querySelector("#deleteProject").addEventListener('click', deleteProject);
document.querySelector("#goToProject").addEventListener('click', function goToProject () {
    location.href=`/project/${projectShortname}`;
});

// select first access row
document.querySelector("table#access tbody tr").classList.add("selected");
document.querySelector("table#access tbody tr input").setAttribute('disabled', true)
document.querySelector("#removeCollaborator").classList.add("disabled");

// select first annotations row
Vue.nextTick(() => {
    document.querySelector("table#annotations tbody tr").classList.add("selected");
});

// select first data files row
// document.querySelector("table#files tbody tr").classList.add("selected");

/**
 * @function onAccessClicked
 * @desc Handles click on one of the 5 access levels: 0=none, 1=view, 2=edit, 3=add, 4=remove
 * @param {Event} e Event triggered by the click
 * @param {int} l Base level of the access icon clicked
 */

 /**
 * @todo This function does not update the projectInfo object!!
 */
function onAccessClicked( e, l ) {
    // access level
    var al = e.target.closest("div").getAttribute("data-level");
    e.target.closest("div").setAttribute("data-level", l+(al != (l+1)));
}

/** 
 * @function onCheckClicked
 * @desc Handles click on 'display' option for annotations in the project settings; 0=do not display; 1=display
 * @param {Event} e Event triggered by click
 */
function onCheckClicked( e, l ) {
    // checkbox toggle for 'display' option
    var checkbox = (e.target.closest("div").attr( "data-check" ) === "1");
    if( checkbox == false ) {
        e.target.closest("div").setAttribute("data-check", true );
    }
    else {
        e.target.closest("div").setAttribute("data-check", false );
    }
}

function selectRow(tr) {
    for(row of tr.closest("tbody").rows) {
        row.classList.remove("selected");
    }
    tr.classList.add("selected");
}
function disableDeleteOnAnyoneUser(e) {
    const curTable = e.currentTarget.getAttribute("id");

    // check if the selected row belongs to the #access table
    if(curTable === "access") {
        // check if the selected user is 'anyone'
        const rowIndex = e.currentTarget.querySelector("tr.selected").rowIndex - 1;
        if(app.projectInfo.collaborators.list[rowIndex].userID === 'anyone') {
            // if yes, disable the 'remove' button
            document.querySelector("#removeCollaborator").classList.add('disabled');
        } else {
            document.querySelector("#removeCollaborator").classList.remove('disabled');
        }
    }
}

function importFilesDialog() {
    var sum=0;
    var rows = document.querySelectorAll("#importFilesDialog tbody tr");
    for( let row=0;row<rows.length;row++) {
        const tr = rows[row];
        const cols = tr.querySelectorAll("td");
        const url = cols[0].textContent;
        const name = cols[1].textContent;
        let i, found;

        if(url.length<10) {
            console.log("Too short to be an url:", url);
            continue;
        }
        
        // look if the data file is not already in the list
        found=false;
        for(i in app.projectInfo.files.list) {
            if(app.projectInfo.files.list[i].source === url) {
                if(app.projectInfo.files.list[i].name === "") {
                    app.projectInfo.files.list[i].name=name;
                }
                found=true;
                break;
            }
        }
        if(found === false) {
            app.projectInfo.files.list.push({source:url, name:name});
        }
    };
    document.querySelector("#importFilesDialog").style.display = 'none';
    console.log(sum,"files added");
}

function exportFiles() {
    var filename=prompt("File name",`${app.projectInfo.shortname}`);
    if(filename === null) {
        return;
    }

    const csv = app.projectInfo.files.list.map((o) => `${o.source},${o.name}`).join("\n");
    var csvData = 'data:text/ascii;charset=utf-8,'+encodeURIComponent(csv);
    var a = document.createElement('a');
    a.href = csvData;
    a.download = filename+'.csv';
    document.body.appendChild(a);
    a.click();
}

function addCollaborator() {
    app.projectInfo.collaborators.list.push({
        userID: "",
        access: {
            collaborators:"view",
            annotations:"view",
            files:"view"
        }
    });
}
function removeCollaborator(param) {
    var index=document.querySelector("table#access .selected").rowIndex - 1;
    app.projectInfo.collaborators.list.splice(index, 1);
}
function addAnnotation() {
    app.projectInfo.annotations.list.push({
        type: "vectorial",
        values: app.labelSets[0], // .source,
        display: true
    });
}
function removeAnnotation(param) {
    var index=document.querySelector("table#annotations .selected").rowIndex - 1;
    app.projectInfo.annotations.list.splice(index, 1);
}
function addFile() {
    app.projectInfo.files.list.push({source:'', name:''});
}
function removeFile(param) {
    var index=document.querySelector("table#files .selected").rowIndex - 1;
    app.projectInfo.files.list.splice(index, 1);
}
function importFiles() {
    // var input=document.getElementById("i-open-mesh");
    console.log("importing files...");
    const input = document.createElement('input');
    input.type="file";
    input.setAttribute('id', 'importFilesInput');
    input.style.display = 'none';
    document.querySelector("body").appendChild(input);
    input.onchange=function (e) {
        var file=this.files[0];
        var reader = new FileReader();
        reader.onload = function(e) {
            document.querySelector("body").removeChild(input);
            document.querySelector("#importFilesDialog").style.display = 'inline-block';
            var result=e.target.result;
            var lines=result.split("\n");
            var html=[];
            let cols;
            for(i in lines) {
                cols=lines[i].split(/[ ]*,[ ]*/);
                html.push("<tr><td contentEditable='true'>"+cols[0]+"</td><td>"+cols[1]+"</td></tr>");
            }
            document.querySelector("#importFilesDialog tbody").innerHTML += html.join("\n");
        }
        reader.readAsText(file);
    }
    input.click();
}

function saveChanges() {
    var xhr = new XMLHttpRequest();
    xhr.onload = function () {
        console.log("Loaded", xhr.status);
        if (xhr.status >= 200 && xhr.status < 300) {
            const res = JSON.parse(xhr.responseText);
            console.log(xhr.responseText);
            if(res.success) {
                document.querySelector("#saveFeedback").textContent = "Successfully saved";
                setTimeout(function() {
                    document.querySelector("#saveFeedback").textContent = "";
                },2000);
            }
        } else {
            document.querySelector("#saveFeedback").textContent = "Unable to save. Please try again later";
            setTimeout(function() {
                document.querySelector("#saveFeedback").textContent = "";
            },3000);
            console.log(err);
        }
    };
    const url = `/project/json/${app.projectInfo.shortname}`;
    console.log("saveChanges URL:", url);
    xhr.open('POST', url);
    xhr.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
    xhr.send(`data=${JSON.stringify(app.projectInfo)}`);
}
function deleteProject() {
    var res = confirm(
        "Are you sure you want to delete project "
        + app.projectInfo.shortname + "? "
        + "This operation cannot be undone."
    );
    
    if (res !== true) {
        return;
    }

    const msg = "";
    const xhr = new XMLHttpRequest();
    xhr.onload = function () {
        if (xhr.status >= 200 && xhr.status < 300) {
            const res = JSON.parse(xhr.responseText);
            if(res.success) {
                document.querySelector("#saveFeedback").textContent = "Successfully deleted";
                setTimeout(function() {
                    document.querySelector("#saveFeedback").textContent = "";
                    location="/";
                },2000);
                return;
            } else {
                document.querySelector("#saveFeedback").textContent = `Unable to delete project: ${res.message}`;
                setTimeout(function() {
                    document.querySelector("#saveFeedback").textContent = "";
                }, 3000);
                return;
            }
        }

        document.querySelector("#saveFeedback").textContent = `Unable to delete project`;
        setTimeout(function() {
            document.querySelector("#saveFeedback").textContent = "";
        }, 3000);
    };
    xhr.open('DELETE', `/project/json/${app.projectInfo.shortname}`);
    xhr.send();
}
</script>

<script>
    (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
    (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
    m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
    })(window,document,'script','https://www.google-analytics.com/analytics.js','ga');

    ga('create', 'UA-50078058-2', 'auto');
    ga('send', 'pageview');
</script>

</body>
</html>
