<!DOCTYPE html>
<html>

<head>
    {{> partials/header }}
    <link rel="stylesheet" href="/css/ui.css" type="text/css" />
    <!-- <link rel="stylesheet" href="/css/microdraw.css" type="text/css" /> -->
    <link rel="stylesheet" href="/css/data-style.css" type="text/css" />
    <link rel="stylesheet" href="/css/project-style.css" type="text/css" />
    <link href='https://fonts.googleapis.com/css?family=Roboto:100' rel='stylesheet' type='text/css'>
    <style>
        input {
            background: none;
            border: none;
            width: 100%;
            text-align: center;
        }
    </style>
</head>

<body>

<div id="app" style="width:100%;height:100%;display:flex;flex-direction:column;align-items:stretch">
    
    <!-- Header (fixed height) -->
    <div id="header" style="height:80px">
        <!-- Top-right menu bar -->
        <div id="menu">
            <img id="addProject" class="button" title="add project" src='/img/plus.svg'/>
            <img id="settings" class="button" title="Settings" src='/img/settings.svg'/>
            <img id="doc" class="button" title="documentation" src='/img/doc.svg'/>
            <a href="https://github.com/r03ert0/microdraw/issues" target="_blank"><img id="bug" class="button" title="report a bug" src='/img/bug.svg'/></a>
            <a href="https://github.com/r03ert0/microdraw" target="_blank"><img id="github" class="button" title="join our github project" style='width:15px;height:15px' src='/img/github.svg'/></a>
            <div id="MyLogin">
                <span>{{{login}}}</span>
            </div>
        </div>

        <!-- Small left-top logo -->
        <div style="display:inline-block;margin:10px">
            <a href='/' style="text-decoration:none">
                <img style='height:56px;vertical-align:middle' src='/img/microdraw-white.svg'/>
            </a><span style="font-family: Roboto, sans-serif; font-size: 36px; font-weight:100;vertical-align:middle" id="fontLogo"> 
                <a href='/' style="font-family: Roboto, sans-serif; font-size: 36px; font-weight:100; text-decoration:none">[[projectInfo.name]]</a>
            </span>
        </div>
    </div>
    
    <!-- Content -->
    <div id="content" style="flex:1 1 auto;position:relative">
        <div style="display:flex;width:100%;height:100%;align-items:stretch;position:absolute">

            <div id="left" style="flex:0 0 400px;position:relative">
            
                <div style="display:flex;flex-direction:column;height:100%">
                    <!-- Project Files -->
                    <div id="projectFiles" class="block" style="flex:1 1 auto">
                        <table style="width:100%;text-align:left">
                            <thead>
                                <tr>
                                    <th>Name</th>
                                    <th>File</th>
                                </tr>
                            </thead>
                            <tbody>
                                <tr v-for="val in projectInfo.files.list">
                                    <td><input v-model="val.name" contentEditable=true class='noEmptyWithPlaceholder' placeholder="Empty"></td>
                                    <td><input v-model="val.source" contentEditable=true class='noEmptyWithPlaceholder' placeholder="Empty"></td>
                                </tr>
                            </tbody>
                        </table>
                    </div>
                
                    <!-- File Annotations -->
                    <div id="annotations" class="block" style="flex:1 1 200px">
                        <table id="vecAnnotations" style="width:100%;text-align:left">
                            <thead>
                                <tr>
                                    <th>Name</th>
                                    <th>Label Set</th>
                                </tr>
                            </thead>
                            <tbody>
                                <tr v-for="val in projectInfo.annotations.list">
                                    <td><input v-model="val.name" contentEditable=true class='noEmptyWithPlaceholder' placeholder="Empty"></td>
                                    <td><input v-model="val.values" contentEditable=true class='noEmptyWithPlaceholder' placeholder="Empty"></td>
                                </tr>
                            </tbody>
                        </table>
                    </div>
                </div>
                
                <div id="resizeButton" class="block">
                </div>
                
            </div>
            
            <div id="right" style="flex:1 0;position:relative">
                <!-- MicroDraw -->
                <div id="microdraw" style="width:100%;height:100%;background:white"></div>
                <!-- End of MicroDraw -->
            </div>

        </div>
    </div>
</div>

<script>
const projectInfo={{{projectInfo}}};
</script>

<script>
function loadScript (path, testScriptPresent) {
  return new Promise((resolve, reject) => {
      if(testScriptPresent && testScriptPresent()) {
          resolve();
      }
      const s = document.createElement("script");
      s.src = path;
      s.onload=resolve;
      s.onerror=reject;
      document.body.appendChild(s);
  });
}

async function attach () {
  const res = await fetch("/microdraw");
  const txt = await res.text();
  const parser = new DOMParser();
  const elem = parser.parseFromString(txt, 'text/html').documentElement;
  const shadow = document.querySelector("#microdraw").attachShadow({mode: 'open'});
  shadow.appendChild(elem);
  loadScript("/js/microdraw.js")
  .then(() => {
      Microdraw.init(shadow);
  });
}
attach();
</script>

<script src="https://cdn.jsdelivr.net/npm/vue"></script>
<!--<script src="http://localhost/libs/vue/2.4.2/vue.min.js"></script>-->

<script>
var app = new Vue({
  el: '#app',
  delimiters: ['[[', ']]'],
  data: {
    projectInfo: projectInfo,
    annotationType: ['vectorial', 'text'],
    labelSets: ['Set I', 'Set II', 'Set III']
  }
});

const projShortname = app.projectInfo.shortname;
const numFilesQuery = 20;
const annotations = {
    text: [],   // collect text annotations
    volume: []  // collect volume annotations
};
let k, h, str, found, annType, annName, file;
let trTemplate;
let objTemplate;
let aParam;
let hashOld;

// interface elements
const resizeButton = document.querySelector("#resizeButton");
const body = document.querySelector("body");

// collect the project's text annotations
for(k=0;k<app.projectInfo.annotations.list.length;k++) {
    if (app.projectInfo.annotations.list[k].type === "text" |
        app.projectInfo.annotations.list[k].type === "hidden text" |
        app.projectInfo.annotations.list[k].type === "multiple choices") {
        $("#projectFiles thead tr").append("<th>" + app.projectInfo.annotations.list[k].name + "</th>");
        annotations.text.push(app.projectInfo.annotations.list[k]);
    }
}
// collect the project's volume annotations
for(k=0;k<app.projectInfo.annotations.list.length;k++) {
    if (app.projectInfo.annotations.list[k].type === "volume") {
        annotations.volume.push(app.projectInfo.annotations.list[k]);
    }
}

// setup event handling
document.querySelector("#addProject").onclick = () => { location="/project/new"; };
document.querySelector("#settings").onclick = () => {
    var pathname=location.pathname;
    if(pathname.slice(-1)=="/")
        location=pathname+"settings";
    else
        location=pathname+"/settings";
};
document.querySelector("#projectFiles").onclick = (e) => {
    const prevRow = document.querySelector("#projectFiles").querySelector("tr.selected");
    const prevIndex = prevRow.rowIndex - 1;
    const row = e.target.closest('tr');
    const index = row.rowIndex - 1;
    if(index !== prevIndex) { 
        location.href = `/project/${projShortname}?source=${projectInfo.files.list[index].source}&project=${projShortname}`;
    }
};
document.querySelector("#vecAnnotations").onclick = (e) => { selectRow(e.target.closest('tr')); };

// listen to changes in file selection by pressing the up/down arrows
window.addEventListener('keydown', (e) => {
    const table = document.querySelector("#projectFiles tbody");
    const row = table.querySelector("tr.selected");
    const prevIndex = row.rowIndex - 1;
    const {length} = app.projectInfo.files.list;
    let newIndex;

    switch(e.keyCode) {
        case 38: // up
            newIndex = (prevIndex + length - 1) % length;
            break;
        case 40: // down
            newIndex = (prevIndex + 1) % length;
            break;
        default:
            return;
    }
    if(newIndex !== prevIndex) {
        location.href = `/project/${projShortname}?source=${projectInfo.files.list[newIndex].source}&project=${projShortname}`;
    }
});

// select first access row
document.querySelector("#projectFiles tbody tr").classList.add("selected");
document.querySelector("#vecAnnotations tbody tr").classList.add("selected");


let fileIndex=0;
var search = location.search.substring(1);
var result;
if(search !== "") {
    var result = JSON.parse('{"' + search.replace(/[&]/g, '","').replace(/[=]/g, '":"') + '"}',
                function(key, value) { return key === "" ? value : decodeURIComponent(value); });
    for(let f=0;f<projectInfo.files.list.length;f++) {
        if(projectInfo.files.list[f].source === result.source) {
            fileIndex = f;
            break;
        }
    }
}
selectRow(document.querySelectorAll("#projectFiles tbody tr")[fileIndex]);
if(typeof result === 'undefined') {
    location.search = `source=${projectInfo.files.list[0].source}&project=${projShortname}`;
}
// Microdraw.init();

/*
// Listen to changes that trigger a metadata save
//------------------------------------------------
    // send data when focus is lost (on blur)
    $(document).on('blur', "#projectFiles table tbody td", function from_project(e) {
        var index = $(e.target).closest('tr').index();
        JSON.stringify(info_proxy); // update content of projectInfo object from proxy by calling all getters
        AtlasMakerWidget.sendSaveMetadataMessage(app.projectInfo.files.list[index]);
    });
    // blur when [enter] is clicked, to trigger data sending
    $(document).on('keydown', "#projectFiles table tbody td", function(e) {
        if(e.which==13 && $(e.target).attr('contenteditable')) {
            e.preventDefault();
            $(e.target).blur();
        }
    });
    // blur when <select> changes value to trigger data sending
    $("#projectFiles table tbody").on('change', "select", function(e) {
        $(e.target).blur();
    });

// Listen to changes in selected table row
//----------------------------------------
    // listen to changes in file selection by clicking on the file table
    $(document).on('click touchstart', "#projectFiles tbody tr",function() {
        var table=$(this).closest("table");
        var currentIndex=$(table).find("tr.selected").index();
        var index=$(this).index();

        if(index>=0 && currentIndex!=index) {
            $(table).find("tr").removeClass("selected");
            $(this).addClass("selected");
            // remove table with previous annotations
            $("table#volAnnotations tbody").html("");
            // load and bind new file
            loadProjectFile(index);
        }
    });

    // listen to changes in file selection by pressing the up/down arrows
    $(document).on('keydown', function(e){
        var table=$("#projectFiles tbody");
        var index=$(table).find("tr.selected").index();
    
        if(e.keyCode!=38 && e.keyCode!=40)
            return;

        switch(e.keyCode) {
            case 38: // up
                index=(index+app.projectInfo.files.list.length-1)%app.projectInfo.files.list.length;
                break;
            case 40: // down
                index=(index+1)%app.projectInfo.files.list.length;
                break;
        }
        $(table).find("tr").removeClass("selected");
        $(table).find("tr:eq("+index+")").addClass("selected");
    
        // remove table with previous annotations
        $("table#volAnnotations tbody").html("");

        // load and bind new file
        loadProjectFile(index);
    });

    // listen to changes in selected volume annotation
    $(document).on('click touchstart', "#volAnnotations tbody tr", function () {
        var table=$(this).closest("tbody");
        var currentIndex=$(table).find("tr.selected").index();
        var index=$(this).index();

        if(index>=0 && currentIndex!=index) {
            $(table).find("tr").removeClass("selected");
            $(this).addClass("selected");
    
            var iarr,found=false;
            for(iarr=0;iarr<BrainBox.info.mri.atlas.length;iarr++) {
                if(BrainBox.info.mri.atlas[iarr].name==annotations.volume[index].name
                    && BrainBox.info.mri.atlas[iarr].project==app.projectInfo.shortname) {
                    found=true;
                    break;
                }
            }
            if(found)
                AtlasMakerWidget.configureAtlasMaker(BrainBox.info,iarr);
            else
                console.log("ERROR: A quite unexpected one too...");
        }
    });
*/

// Functions
//----------
function queryFiles() {
    $.getJSON("/project/json/"+app.projectInfo.shortname+"/files", {
        start: app.projectInfo.files.list.length,
        length: numFilesQuery
    })
    .then(function(list) {
        if(list.length) {
            appendFilesToProject(list);
            queryFiles();
        } else {
            console.log("All files downloaded. Length:",app.projectInfo.files.list.length);
        }
    })
}
function appendFilesToProject(list) {
    var i0, i, j;
    
    i0 = app.projectInfo.files.list.length;
    app.projectInfo.files.list.push.apply(app.projectInfo.files.list, list);
    
    // make sure that all mri files have a text annotations object for the project
    for(i=0;i<list.length;i++) {
        file = app.projectInfo.files.list[i0+i];
        if (!(file.mri)) {
            file.mri = {};
        }
        if (!(file.mri.annotations)) {
            file.mri.annotations = {};
        }
        if (!(file.mri.annotations[projShortname])) {
            file.mri.annotations[projShortname] = {};
        }
    }
    // initialise the relevant annotation entries in each mri file if required
    for(i=0;i<list.length;i++) {
        file = app.projectInfo.files.list[i0+i];
        for(j=0;j<annotations.text.length;j++) {
            annName = annotations.text[j].name;
            if(!file.mri.annotations[projShortname][annName]) {
                var date=new Date();
                file.mri.annotations[projShortname][annName] = {
                    created: date.toJSON(),
                    modified: date.toJSON(),
                    modifiedBy: AtlasMakerWidget.User.username,
                    type: "text"
                };
            }
        }
    }
    for(var i=0;i<list.length;i++) {
        BrainBox.appendAnnotationTableRow(i0+i,aParam);
    }
}

/**
 * @func loadProjectFile
 * @desc load a new mri from the project list
 */
function loadProjectFile(index) {
    var def = new $.Deferred();
    
    var url=app.projectInfo.files.list[index].source;
    var params={url:url,view:"cor",slice:180,fullscreen:false};
    $("#loadingIndicator p").text("Loading...");
    $("#loadingIndicator").show();
    
    /**
     * @todo The mri entry may correspond to a file that has not been downloaded yet!
     */
    var info = app.projectInfo.files.list[index];
    
    if($.isEmptyObject(info) === false) {
        // check if the mri contains the required annotations
        var irow; // index of the table row
        var iarr; // index of the object in the data array
        for(irow=0;irow<annotations.volume.length;irow++) {
            found = false;
            if(!info.mri.atlas)
                info.mri.atlas = [];
            for(iarr=0;iarr<info.mri.atlas.length;iarr++) {
                if(annotations.volume[irow].name == info.mri.atlas[iarr].name
                   && app.projectInfo.shortname == info.mri.atlas[iarr].project) {
                    found=true;
                    break;
                }
            }
            // if it doesn't, create them
            if(found == false) {
                // add annotation
                var date=new Date();
                // add data to annotations array
                var atlas = {
                    name: annotations.volume[irow].name,
                    project: app.projectInfo.shortname,
                    created: date.toJSON(), 
                    modified: date.toJSON(), 
                    modifiedBy: AtlasMakerWidget.User.username, 
                    filename: Math.random().toString(36).slice(2)+".nii.gz",    // automatically generated filename
                    labels: annotations.volume[irow].values,
                    owner: AtlasMakerWidget.User.username,
                    type: "volume"
                };
            
                app.projectInfo.files.list[index].mri.atlas.push(atlas);
            }
        
            annotations.volume[irow].annotationItemIndex=iarr;
        }
        params.info=app.projectInfo.files.list[index];
    
        if(annotations.volume[0]) {
            params.annotationItemIndex = annotations.volume[0].annotationItemIndex;
        } else {
            params.annotationItemIndex = -1;
        }
    
        BrainBox.configureBrainBox(params)
        .then(function from_project(){

            // bind volume annotations to table#volAnnotations
            var annvol_proxy={};
            var aParam = {
                table: $("table#volAnnotations"),
                info_proxy: annvol_proxy,
                info: BrainBox.info,
                trTemplate: $.map([
                    "<tr>",
                    " <td></td>",           // volume name
                    " <td></td>",           // volume label set
                    "</tr>"],function(o){return o}).join(),
                objTemplate: [
                    {   typeOfBinding:1,
                        path:"mri.atlas.#.name"
                    },
                    {   typeOfBinding:1,
                        path:"mri.atlas.#.labels"
                    }
                ]
            };

            // add and bind new table row
            for(irow=0;irow<annotations.volume.length;irow++) {    
                BrainBox.appendAnnotationTableRow2(irow,annotations.volume[irow].annotationItemIndex,aParam);
            }
            // update in server
            saveAnnotations(aParam);

            // select the first annotation by default
            // (should be read from project settings)
            $("#annotations tbody tr:eq(0)").addClass("selected");

            AtlasMakerWidget.User.projectPage = app.projectInfo.shortname;
            AtlasMakerWidget.sendUserDataMessage(JSON.stringify({projectPage:app.projectInfo.shortname}));
            
            def.resolve();
        });
    } else {
        var msg=AtlasMakerWidget.container.find("#text-layer");
        msg.html("<text x='5' y='15' fill='white'>ERROR: File is unreadable</text>");
        console.log("ERROR: Cannot read data. The file is maybe corrupt?");
        
        def.reject();
    }
    
    return def;
}
/**
 * @func saveAnnotations
 * @desc Save annotations if they have changed
 */
function saveAnnotations(param) {
    JSON.stringify(param.info_proxy); // update BrainBox.info from info_proxy
    AtlasMakerWidget.sendSaveMetadataMessage(BrainBox.info);
    hashOld = BrainBox.hash(JSON.stringify(BrainBox.info));
}

/**
 * @func resizeStart
 */
const configureResizeButton = function () {
    resizeButton.setAttribute('data', JSON.stringify({flag:-1,x0:0,y0:0}));
    resizeButton.addEventListener('mousedown', resizeStart);
    resizeButton.addEventListener('touchstart', resizeStart);
    body.addEventListener('mousemove',resizeMove);
    body.addEventListener('touchmove',resizeMove);
    body.addEventListener('mouseup',resizeEnd);
    body.addEventListener('touchend',resizeEnd);
}

/**
 * @func resizeStart
 */
const resizeStart = function (e) {
    let x0, y0;
    switch(e.type) {
        case 'mousemove':
            x0 = e.pageX;
            y0 = e.pageY;
            break;
        case 'touchmove':
            x0 = e.changedTouches[0].pageX;
            y0 = e.changedTouches[0].pageY;
            break;
        default:
            x0 = 0;
            y0 = 0;
    }
    document.querySelector("#resizeButton").setAttribute(
        'data',
        JSON.stringify({ flag: 0, x0, y0 })
    );
}

/**
 * @func resizeMove
 */
function resizeMove(e) {
    let x, y;
    switch(e.type) {
        case 'mousemove':
            x = e.pageX;
            y = e.pageY;
            break;
        case 'touchmove':
            x = e.changedTouches[0].pageX;
            y = e.changedTouches[0].pageY;
            // x = e.originalEvent.changedTouches[0].pageX;
            // y = e.originalEvent.changedTouches[0].pageY;
            break;
        default:
            x = 0;
            y = 0;
    }

    const {flag, x0, y0} = JSON.parse(resizeButton.getAttribute('data'));
    if(flag === 0) {
        resizeButton.setAttribute('data', JSON.stringify({flag:1, x0: x, y0: y}));
    } else if(flag === 1) {
        const d = x0 - x;
        const newFlexBasis = `${document.querySelector("#left").clientWidth - d}px`;
        document.querySelector("#left").style.flexBasis = newFlexBasis;
        resizeButton.setAttribute('data', JSON.stringify({flag: 1, x0: x, y0: y}));
        Microdraw.resizeAnnotationOverlay();
    }
}

/**
 * @func resizeEnd
 */
const resizeEnd = function (e) {
    resizeButton.setAttribute('data', JSON.stringify({flag: -1}));
}

configureResizeButton();

function selectRow(tr) {
    for(row of tr.closest("tbody").rows) {
        row.classList.remove("selected");
    }
    tr.classList.add("selected");
}

</script>

<script>
    (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
    (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
    m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
    })(window,document,'script','https://www.google-analytics.com/analytics.js','ga');

    ga('create', 'UA-50078058-2', 'auto');
    ga('send', 'pageview');
</script>
</body>
</html>
